////////////////////////////////////////////////////////////////////////////////
//
// Code::Blocks new project wizard script
//
// Project: Sming Wizard
// Author:  Brian Walton
// Derived from works by:  Brian Sidebotham & H. Metin OZER
//
////////////////////////////////////////////////////////////////////////////////

function BeginWizard()
{
    local wiz_type = Wizard.GetWizardType();

    if (wiz_type == wizProject)
    {
        local intro_msg = _T("Welcome to the SMING project wizard!\n" +
                             "This wizard will guide you through creating a new SMING project for the ESP8266.\n\n" +
                             "When you 're ready to proceed, please click \"Next\"...");

        Wizard.AddInfoPage(_T("SMINGIntro"), intro_msg);
        Wizard.AddProjectPathPage();
    }
    else
        print(wiz_type);
}

// -----------------------------------------------------------------------------
// Return a string of the form "filename;contents"
// Return an empty string to denote that no more files are to be generated
function GetGeneratedFile(file_index)
{
	local filename = GetTemplateFile(file_index);
    if (filename != _T(""))
    {
        local path = Wizard.FindTemplateFile(_T("sming/files/" + filename));
		local filecontent = IO.ReadFileContents(path);
        return filename + _T(";") + filecontent;
    }
	else
		return _T("");
}

// -----------------------------------------------------------------------------
// Return template filename based on an index
function GetTemplateFile(index)
{
    if (index == 0)
	{
        return _T("Makefile");
    }
	else
    if (index == 1)
    {
		return _T("src/application.cpp");
    }
	else
    if (index == 2)
    {
		return _T("include/application.h");
    }
	else
    if (index == 3)
    {
		return _T("include/user_config.h");
    }
	else
    if (index == 4)
    {
		return _T("files/README.txt");
    }

    return _T("");
}


// Setup the the project
function SetupProject(project)
{
    // Set compiler - we only use make from this compiler configuration
    project.SetCompilerID(_T("cygwin"));

    // We use custom Makefile
    project.SetMakefileCustom(true);

    // Remove default targets
    project.RemoveBuildTarget(_T("Debug"));
    project.RemoveBuildTarget(_T("Release"));
    // Add targets
	project.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
    local buildTarget = project.AddBuildTarget(_T("build"));
	buildTarget.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
    buildTarget = project.AddBuildTarget(_T("flash"));
	buildTarget.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
    buildTarget = project.AddBuildTarget(_T("flashinit"));
	buildTarget.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
    buildTarget = project.AddBuildTarget(_T("spiff_update"));
	buildTarget.SetMakeCommandFor(mcClean, _T("$make -f $makefile clean"));
	
	// Add code completion paths (not working!!!)
	project.AddToExtensions(_T("code_completion/+search_path:add=include_path"));

    return true;
}
